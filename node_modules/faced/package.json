{
  "name": "faced",
  "version": "1.1.3",
  "description": "light-weight library for face recognition including features such as eyes, nose and mouth.",
  "main": "lib/faced.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "opencv": "~0.3.1",
    "underscore": "~1.4.4"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gordalina/faced.git"
  },
  "keywords": [
    "face",
    "face detection",
    "face recognition",
    "face identification",
    "detection",
    "recognition"
  ],
  "author": {
    "name": "Samuel Gordalina"
  },
  "license": "MIT",
  "readme": "# faced\n\nfaced is a light-weight library for face recognition including features such as eyes, nose and mouth. It requires opencv.\n\n![](https://raw.github.com/gordalina/faced/master/images/lenna.features.png)\n\nFace is outlined in **black**, the eyes are **red** & **green** for left and right respectively, the nose is outlined in **white** and the mouth in **blue**.\n\n## Dependencies\n\n### OpenCV\nMake sure you have [OpenCV](http://opencv.org/downloads.html) installed on your machine.\n\nFor MacOS X you can use [Homebrew](http://brew.sh)\n\n```\n$ brew tap homebrew/science\n$ brew install opencv\n```\n\n## Installation\n\n### As a dependency to your project\nJust add `\"faced\": \"1.x\",` to your dependencies list in `package.json`.\n\n### Globally\n`npm install -g faced`\n\n## Identify your first face\n\n```javascript\nvar faced = new Faced();\nfaced.detect('image.jpg', function (faces, image, file) {\n  if (!faces) {\n    return console.log(\"No faces found!\");\n  }\n\n  var face = sface[0];\n\n  console.log(\n    \"Found a face at %d,%d with dimensions %dx%d\",\n    face.getX(),\n    face.getY(),\n    face.getWidth(),\n    face.getHeight()\n  );\n\n  console.log(\n    \"What a pretty face, it %s a mouth, it %s a nose, it % a left eye and it %s a right eye!\",\n    face.getMouth() ? \"has\" : \"does not have\",\n    face.getNose() ? \"has\" : \"does not have\",\n    face.getEyeLeft() ? \"has\" : \"does not have\",\n    face.getEyeRight() ? \"has\" : \"does not have\",\n  );\n});\n```\n\nIts that simple! See the program used to [generate the above image](https://github.com/gordalina/faced/blob/master/examples/identify.js)\n\n## API\n\n### Faced.detect(source, function, context)\n\nLoads an image from `source` which can be a file path or a buffer and executes `function` upon completion.\n\nThe callback function expects a prototype like `function (faces, image, file) { }`, where the first is an array of `Face`, the second is a `Matrix` [object from opencv](https://npmjs.org/package/opencv#readme) and the third is the path of the image.\n\nIn case of error the arguments `faces` and `image` will be `undefined`.\n\n### Class `Feature`\n - `Feature.getX()` Returns the upper left corner X position of the face\n - `Feature.getY()` Returns the upper left corner Y position of the face\n - `Feature.getX2()` Returns the lower right corner X position of the face\n - `Feature.getY2()` Returns the lower right conrner Y position of the face\n - `Feature.getWidth()` Returns the width\n - `Feature.getHeight()` Returns the height\n - `Feature.intersect(Feature)` Returns the percentage of shared spaced that the current feature has with the given argument Feature. *Although this is used internally it might be useful for client usage.*\n\n### Class `Face` (extends `Feature`)\n\nAll of the following method1s return an instance of `Feture` or `undefined` if it could not detect.\n\n - `Face.getMouth()`\n - `Face.getNose()`\n - `Face.getEyeLeft()`\n - `Face.getEyeRight()`\n\nOther significant methods\n\n - `Face.getFeature(name)` Returns a feature by name. Possible names are: `mouth`, `nose`, `eyeLeft` and `eyeRight`.\n - `Face.getFeatures()` Returns an array of `Feature` that the instance has detected.\n - `Face.getFeatureCount()` Returns the number of detected features.\n\n## Examples\n\n```bash\n$ node examples/identify.js images/lenna.png\n```\n\nThen open `images/lenna.features.png` on your favourite image viewer.\n\n## Information\n\n#### License\n\nfaced is licensed under the [MIT license](http://opensource.org/licenses/MIT)\n\n#### Copyright\n\nCopyright (c) 2013, Samuel Gordalina <samuel.gordalina@gmail.com>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gordalina/faced/issues"
  },
  "homepage": "https://github.com/gordalina/faced",
  "_id": "faced@1.1.3",
  "dist": {
    "shasum": "d4cf2202ba66f9065afb5ccc6883ae4b37d39bcb"
  },
  "_from": "faced@",
  "_resolved": "https://registry.npmjs.org/faced/-/faced-1.1.3.tgz"
}
