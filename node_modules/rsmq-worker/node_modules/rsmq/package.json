{
  "name": "rsmq",
  "description": "A really simple message queue based on Redis",
  "version": "0.3.9",
  "author": {
    "name": "P. Liess",
    "email": "smrchy+npm@gmail.com"
  },
  "engines": {
    "node": "> 0.8.10"
  },
  "scripts": {
    "test": "mocha ./test/test.js"
  },
  "dependencies": {
    "redis": "*",
    "lodash": "*",
    "hiredis": "*"
  },
  "optionalDependencies": {
    "hiredis": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "async": "*"
  },
  "keywords": [
    "queue",
    "messagequeue",
    "sqs",
    "aws",
    "redis"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/smrchy/rsmq.git"
  },
  "readme": "![RSMQ: Redis Simple Message Queue for Node.js](https://img.webmart.de/rsmq_wide.png)\n\n# Redis Simple Message Queue for Node.js - RSMQ\n\nA lightweight message queue for Node.js that requires no dedicated queue server. Just a Redis server.\n\n[![Build Status](https://secure.travis-ci.org/smrchy/rsmq.png?branch=master)](http://travis-ci.org/smrchy/rsmq)\n[![Dependency Status](https://david-dm.org/smrchy/rsmq.svg)](https://david-dm.org/smrchy/rsmq)\n\n**tl;dr:** If you run a Redis server and currently use Amazon SQS or a similar message queue you might as well use this fast little replacement. Using a shared Redis server multiple Node.js processes can send / receive messages.\n\n## Features\n\n* Lightweight: **Just Redis**. Every client can send and receive messages via a shared Redis server. \n* Guaranteed **delivery of a message to exactly one recipient** within a messages visibility timeout.\n* No security: **Like memcached**. Only for internal use in trusted environments.\n* [Test coverage](http://travis-ci.org/smrchy/rsmq)\n* Similar to Amazon SQS (Simple Queue Service) - with some differences:\n  * Durability depends on your Redis setup.\n  * No ReceiptHandle. A message is deleted by the message id. A message can be deleted if you store the id that is returned from the `sendMessage` method.\n  * No MessageRetentionPeriod: Messages stay in the queue unless deleted.\n  * No bulk operations (SendMessageBatch, DeleteMessageBatch)\n  * Some SQS specific features are missing\n* Optional RESTful interface via [rest-rsmq](https://github.com/smrchy/rest-rsmq)  \n  \n  \n## Usage\n\n* After creating a queue you can send messages to that queue.\n* The messages will be handled in a **FIFO** (first in first out) manner unless specified with a delay.\n* Every message has a unique `id` that you can use to delete the message. \n* The `sendMessage` method will return the `id` for a sent message.\n* The `receiveMessage` method will return an `id` along with the message and some stats.\n* Should you not delete the message it will be eligible to be received again after the visibility timeout is reached.\n* Please have a look at the `createQueue` and `receiveMessage` methods described below for optional parameters like **visibility timeout** and **delay**.\n\n\n## Installation\n\n`npm install rsmq`\n\n\n## Example\n\n### Initialize\n\n```javascript\nRedisSMQ = require(\"rsmq\");\nrsmq = new RedisSMQ( {host: \"127.0.0.1\", port: 6379, ns: \"rsmq\"} );\n```\nParameters for RedisSMQ via an *options* object:\n\n* `host` (String): *optional (Default: \"127.0.0.1\")* The Redis server\n* `port` (Number): *optional (Default: 6379)* The Redis port\n* `options` (Object): *optional (Default: {})* The Redis [https://github.com/mranney/node_redis#rediscreateclientport-host-options](redis.createClient) `options` object. \n* `client` (RedisClient): *optional* A existing redis client instance. `host` and `server` will be ignored.\n* `ns` (String): *optional (Default: \"rsmq\")* The namespace prefix used for all keys created by **rsmq**\n\n\n### Create a queue\n\nPlease look at the *Methods* section for optional parameters when creating a queue.\n\n```javascript\nrsmq.createQueue({qname:\"myqueue\"}, function (err, resp) {\n\t\tif (resp===1) {\n\t\t\tconsole.log(\"queue created\")\n\t\t}\n});\n\n```\n\n\n### Send a message\n\n\n```javascript\nrsmq.sendMessage({qname:\"myqueue\", message:\"Hello World\"}, function (err, resp) {\n\tif (resp) {\n\t\tconsole.log(\"Message sent. ID:\", resp);\n\t}\n});\n```\n\n\n### Receive a message\n\n\n```javascript\nrsmq.receiveMessage({qname:\"myqueue\"}, function (err, resp) {\n\tif (resp.id) {\n\t\tconsole.log(\"Message received.\", resp)\t\n\t}\n\telse {\n\t\tconsole.log(\"No messages for me...\")\n\t}\n});\n```\n\n### Delete a message\n\n\n```javascript\nrsmq.deleteMessage({qname:\"myqueue\", id:\"dhoiwpiirm15ce77305a5c3a3b0f230c6e20f09b55\"}, function (err, resp) {\n\tif (resp===1) {\n\t\tconsole.log(\"Message deleted.\")\t\n\t}\n\telse {\n\t\tconsole.log(\"Message not found.\")\n\t}\n});\n```\n\n  \n## Methods\n\n\n### changeMessageVisibility\n\nChange the visibility timer of a single message.\nThe time when the message will be visible again is calculated from the current time (now) + `vt`.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): The message id.\n* `vt` (Number): The length of time, in seconds, that this message will not be visible. Allowed values: 0-9999999 (around 115 days)\n\nReturns: \n\n* `1` if successful, `0` if the message was not found.\n\n\n\n### createQueue\n\nCreate a new queue.\n\nParameters:\n\n* `qname` (String): The Queue name. Maximum 80 characters; alphanumeric characters, hyphens (-), and underscores (_) are allowed.\n* `vt` (Number): *optional* *(Default: 30)* The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* *(Default: 0)* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* *(Default: 65536)* The maximum message size in bytes. Allowed values: 1024-65536\n\nReturns:\n\n* `1`\n\n\n\n### deleteMessage\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): message id to delete.\n\nReturns:\n\n* `1` if successful, `0` if the message was not found.\n\n\n\n### deleteQueue\n\nDeletes a queue and all messages.\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns:\n\n* `1`\n\n\n\n### getQueueAttributes\n\nGet queue attributes, counter and stats\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns an object:\n\n* `vt`: The visibility timeout for the queue in seconds\n* `delay`: The delay for new messages in seconds\n* `maxsize`: The maximum size of a message in bytes\n* `totalrecv`: Total number of messages received from the queue\n* `totalsent`: Total number of messages sent to the queue\n* `created`: Timestamp (epoch in seconds) when the queue was created\n* `modified`: Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs`: Current number of messages in the queue\n* `hiddenmsgs`: Current number of hidden / not visible messages. A message can be hidden while \"in flight\" due to a `vt` parameter or when sent with a `delay`\n\n\n\n### listQueues\n\nList all queues\n\nReturns an array:\n\n* `[\"qname1\", \"qname2\"]`\n\n\n\n### receiveMessage\n\nReceive the next message from the queue.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* *(Default: queue settings)* The length of time, in seconds, that the received message will be invisible to others. Allowed values: 0-9999999 (around 115 days)\n\nReturns an object:\n\n  * `message`: The message's contents.\n  * `id`: The internal message id.\n  * `sent`: Timestamp of when this message was sent / created.\n  * `fr`: Timestamp of when this message was first received.\n  * `rc`: Number of times this message was received.\n\nNote: Will return an empty object if no message is there  \n\n\n\n### sendMessage\n\nSends a new message.\n\nParameters:\n\n* `qname` (String)\n* `message` (String)\n* `delay` (Number): *optional* *(Default: queue settings)* The time in seconds that the delivery of the message will be delayed. Allowed values: 0-9999999 (around 115 days)\n\nReturns:\n\n* `id`: The internal message id.\n\n\n    \n### setQueueAttributes\n\nSets queue parameters.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* * The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* The maximum message size in bytes. Allowed values: 1024-65536\n\nNote: At least one attribute (vt, delay, maxsize) must be supplied. Only attributes that are supplied will be modified.\n\nReturns an object:\n\n* `vt`: The visibility timeout for the queue in seconds\n* `delay`: The delay for new messages in seconds\n* `maxsize`: The maximum size of a message in bytes\n* `totalrecv`: Total number of messages received from the queue\n* `totalsent`: Total number of messages sent to the queue\n* `created`: Timestamp (epoch in seconds) when the queue was created\n* `modified`: Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs`: Current number of messages in the queue\n* `hiddenmsgs`: Current number of hidden / not visible messages. A message can be hidden while \"in flight\" due to a `vt` parameter or when sent with a `delay`\n\n\n\n## Changes\n\nsee the [CHANGELOG](https://github.com/smrchy/rsmq/blob/master/CHANGELOG.md)\n\n\n## More Node.js and Redis projects?\n\nCheck out our other projects which are based on Node.js and Redis as a datastore:\n\n\n### [Redis-Tagging](https://github.com/smrchy/redis-tagging)\n\nA Node.js helper library to make tagging of items in any legacy database (SQL or NoSQL) easy and fast. Redis is used to store tag-item associations and to allow fast queries and paging over large sets of tagged items.\n\n* **Maintains order** of tagged items\n* **Unions** and **intersections** while maintaining the order\n* Counters for each tag\n* **Fast paging** over results with `limit` and `offset`\n* Optional **RESTful interface** via [REST-tagging](https://github.com/smrchy/rest-tagging)\n* [Read more...](https://github.com/smrchy/redis-tagging)\n\n\n### [Redis-Sessions](https://github.com/smrchy/redis-sessions)\n\nThis is a Node.js module to keep sessions in a Redis datastore and add some useful methods.\n\nThe main purpose of this module is to **generalize sessions across application server platforms**. We use nginx reverse proxy to route parts of a website to a Node.js server and other parts could be Python, .net, PHP, Coldfusion or Java servers. You can then use [rest-sessions](https://github.com/smrchy/rest-sessions) to access the same sessions on all app server via a REST interface.\n\n* Standard features: Set, update, delete a single session\n* Advanced features: List / delete all sessions, all sessions of a single UserID\n* Activity in the last *n* seconds\n* [and more...](https://github.com/smrchy/redis-sessions)\n\n## The MIT License (MIT)\n\nCopyright © Patrick Liess, http://www.tcs.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/smrchy/rsmq/issues"
  },
  "homepage": "https://github.com/smrchy/rsmq",
  "_id": "rsmq@0.3.9",
  "_from": "rsmq@0.3.x"
}
